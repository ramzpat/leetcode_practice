# https://leetcode.com/problems/valid-sudoku/

class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        
        mem_block = [ [{} for _ in range(0,3)] for _ in range(0,3) ]
        mem_row = [ {} for _ in range(0,9) ]
        mem_col = [ {} for _ in range(0,9) ]
        
        for i in range(0, 9):
            for j in range(0, 9):
                val = board[i][j]
                if val == ".":
                    pass 
                else:
                    if (val in mem_block[i/3][j/3] or
                       val in mem_row[i] or
                       val in mem_col[j]):
                       return False
                    else:
                        mem_block[i/3][j/3][val] = 1
                        mem_row[i][val] = 1
                        mem_col[j][val] = 1
        return True

board = [
    [".","8","7","6","5","4","3","2","1"],
    ["2",".",".",".",".",".",".",".","."],
    ["3",".",".",".",".",".",".",".","."],
    ["4",".",".",".",".",".",".",".","."],
    ["5",".",".",".",".",".",".",".","."],
    ["6",".",".",".",".",".",".",".","."],
    ["7",".",".",".",".",".",".",".","."],
    ["8",".",".",".",".",".",".",".","."],
    ["9",".",".",".",".",".",".",".","."]]
board = [
    [".",".",".",".",".",".",".",".","2"],
    [".",".",".",".",".",".","6",".","."],
    [".",".","1","4",".",".","8",".","."],
    [".",".",".",".",".",".",".",".","."],
    [".",".",".",".",".",".",".",".","."],
    [".",".",".",".","3",".",".",".","."],
    ["5",".","8","6",".",".",".",".","."],
    [".","9",".",".",".",".","4",".","."],
    [".",".",".",".","5",".",".",".","."]]

s = Solution()
print(s.isValidSudoku(board))